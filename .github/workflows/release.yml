name: Build and Release PyPi and Rust Packages

on:
  push:
    branches:
      - main
  pull_request:

  release:
    types: [published]

permissions:
  contents: read

env:
  PACKAGE_NAME: scouter
  RUSTFLAGS: -C debuginfo=0
  PYTHON_VERSION: "3.9"
  PYTHON_VERSION_WIN_ARM64: "3.11" # taken from polars
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always

jobs:
  build-sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          rust-toolchain: stable
          working-directory: ./py-scouter

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: pypi_sdist
          path: ./py-scouter/dist
          retention-days: 1

  build-ubuntu:
    name: build - ubuntu - ${{ matrix.platform.manylinux }} - ${{ matrix.platform.target }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - target: x86_64
            manylinux: auto
          - target: aarch64
            manylinux: "2_28"

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - run: pip install -U twine

      - name: Set OPENSSL_DIR environment variable
        run: echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV

      - name: build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          manylinux: ${{ matrix.platform.manylinux }}
          args: --release --out dist
          rust-toolchain: stable
          docker-options: -e CI
          working-directory: ./py-scouter

          # See: https://github.com/sfackler/rust-openssl/issues/2036#issuecomment-1724324145
          before-script-linux: |
            # If we're running on rhel centos, install needed packages.
            if command -v yum &> /dev/null; then
                yum update -y && yum install -y perl-core openssl openssl-devel pkgconfig libatomic

                # If we're running on i686 we need to symlink libatomic
                # in order to build openssl with -latomic flag.
                if [[ ! -d "/usr/lib64" ]]; then
                    ln -s /usr/lib/libatomic.so.1 /usr/lib/libatomic.so
                fi
            else
                # If we're running on debian-based system.
                apt update -y && apt-get install -y libssl-dev openssl pkg-config
            fi

            # Install bindgen CLI
            cargo install --force --locked bindgen-cli

            # Determine architecture (x86_64 or x86)
            ARCH=$(uname -m)

            echo "Detected architecture: $ARCH"

            # Download the correct CMake version based on the architecture
            if [[ "$ARCH" == "x86_64" ]]; then
                echo "Downloading CMake for x86_64 architecture"
                curl -L https://github.com/Kitware/CMake/releases/download/v3.26.4/cmake-3.26.4-linux-x86_64.sh -o cmake.sh
                chmod +x cmake.sh
                ./cmake.sh --skip-license --prefix=/usr/local
            elif [[ "$ARCH" == "i686" ]]; then
                echo "Downloading CMake for x86 architecture"
                curl -L https://github.com/Kitware/CMake/releases/download/v3.26.4/cmake-3.26.4.tar.gz -o cmake.tar.gz
                tar -xzf cmake.tar.gz
                cd cmake-3.26.4
                ./bootstrap --prefix=/usr/local
                make -j$(nproc)
                make install
                cd ..
            else
                echo "Unsupported architecture: $ARCH"
                exit 1
            fi

            cmake --version

      - name: Check dist
        working-directory: ./py-scouter
        run: ls -lh dist/

      - name: Check wheel
        working-directory: ./py-scouter
        run: twine check --strict dist/*

      - uses: actions/upload-artifact@v4
        with:
          name: pypi_files_ubuntu_${{ matrix.platform.target }}_all
          path: ./py-scouter/dist
          retention-days: 1

  build-macos:
    name: build - macos - (${{ matrix.os}} - ${{ matrix.architecture}})
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, macos-15]
        architecture: [x86-64, aarch64]
        exclude:
          - os: macos-15
            architecture: x86-64
          - os: macos-13
            architecture: aarch64

    runs-on: ${{ matrix.os}}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - run: pip install -U twine

      - name: Set Rust target triple
        id: target
        run: |
          if [[ "${{ matrix.os }}" == "macos-13" ]]; then
            echo "target=x86_64-apple-darwin" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.os }}" == "macos-15" ]]; then
            echo "target=aarch64-apple-darwin" >> $GITHUB_OUTPUT
          else
            echo "Unknown macOS version"
            exit 1
          fi

      - name: Build wheel
        uses: PyO3/maturin-action@v1
        with:
          command: build
          target: ${{ steps.target.outputs.target }}
          args: --release --out dist
          rust-toolchain: stable
          working-directory: ./py-scouter

      - name: Check dist
        working-directory: ./py-scouter
        run: ls -lh dist/

      - name: Check wheel
        working-directory: ./py-scouter
        run: twine check --strict dist/*

      - uses: actions/upload-artifact@v4
        with:
          name: pypi_files_macos_${{ steps.target.outputs.target }}_all
          path: ./py-scouter/dist
          retention-days: 1

  build-windows:
    name: build - windows - (${{ matrix.os}} - ${{ matrix.architecture}})
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, windows-11-arm]
        architecture: [x86-64, aarch64]
        exclude:
          - os: windows-latest
            architecture: aarch64
          - os: windows-11-arm
            architecture: x86-64

    runs-on: windows-latest
    steps:
      # taken from polars for building on arm64 windows
      - name: Setup build environment (ARM64 Windows)
        if: matrix.os == 'windows-11-arm'
        shell:
          powershell
          # Notes
          # * We update `Expand-Archive` to avoid "" is not a supported archive file format when extracting
          #   files that don't end in `.zip`
        run: |
          Write-Output "> Update Expand-Archive (Microsoft.PowerShell.Archive)"
          Install-PackageProvider -Name NuGet -Force
          Install-Module -Name Microsoft.PowerShell.Archive -Force

          Write-Output "> Setup bash.exe (git-for-windows/PortableGit)"
          Invoke-WebRequest "https://github.com/git-for-windows/git/releases/download/v2.47.1.windows.1/PortableGit-2.47.1-arm64.7z.exe" -OutFile /git.7z.exe
          /git.7z.exe -o/git -y

          Write-Output "> Setup Rust"
          Invoke-WebRequest "https://static.rust-lang.org/rustup/dist/aarch64-pc-windows-msvc/rustup-init.exe" -OutFile /rustup-init.exe
          /rustup-init.exe --default-host aarch64-pc-windows-msvc -y

          Write-Output "> Setup VS Build Tools"
          Invoke-WebRequest "https://aka.ms/vs/17/release/vs_BuildTools.exe" -OutFile /vs_BuildTools.exe
          Start-Process C:/vs_BuildTools.exe -ArgumentList " `
              --add Microsoft.VisualStudio.Workload.NativeDesktop `
              --add Microsoft.VisualStudio.Workload.VCTools `
              --add Microsoft.VisualStudio.Component.VC.Tools.arm64 `
              --add Microsoft.VisualStudio.Component.VC.Llvm.Clang `
              --add Microsoft.VisualStudio.Component.VC.Llvm.ClangToolset `
              --includeRecommended --quiet --norestart --wait" -Wait

          Write-Output "> Setup CMake"
          Invoke-WebRequest "https://github.com/Kitware/CMake/releases/download/v3.31.2/cmake-3.31.2-windows-arm64.zip" -OutFile /cmake.zip
          Expand-Archive /cmake.zip -DestinationPath /

          Write-Output "> Download jq.exe (github.com/jqlang) (needed for tomlq / yq)"
          Invoke-WebRequest https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-windows-i386.exe -OutFile /jq.exe

          Write-Output "> Update GITHUB_PATH"
          [System.IO.File]::AppendAllText($Env:GITHUB_PATH, "`n" + "C:/git/bin/")
          [System.IO.File]::AppendAllText($Env:GITHUB_PATH, "`n" + $Env:USERPROFILE + "/.cargo/bin/")
          [System.IO.File]::AppendAllText($Env:GITHUB_PATH, "`n" + "C:/Program Files (x86)/Microsoft Visual Studio/2022/BuildTools/VC/Tools/Llvm/bin/")
          [System.IO.File]::AppendAllText($Env:GITHUB_PATH, "`n" + "C:/cmake-3.31.2-windows-arm64/bin")
          [System.IO.File]::AppendAllText($Env:GITHUB_PATH, "`n" + "C:/")
          [System.IO.File]::AppendAllText($Env:GITHUB_PATH, "`n")

          Get-Content $Env:GITHUB_PATH | Out-Host

      - name: Check build environment (ARM64 Windows)
        if: matrix.os == 'windows-11-arm'
        run: |
          set -x
          bash --version
          rustup show
          clang -v
          cmake --version

      - uses: actions/checkout@v4

      - name: Set up Python
        if: matrix.os != 'windows-11-arm'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Python (ARM64 Windows)
        if: matrix.os == 'windows-11-arm'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_WIN_ARM64 }}

      - run: pip install -U twine

      - name: Set Rust target triple
        id: target
        run: |
          if [[ "${{ matrix.architecture }}" == "x86-64" ]]; then
            echo "target=x86_64-pc-windows-msvc" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.architecture }}" == "aarch64" ]]; then
            echo "target=aarch64-pc-windows-msvc" >> $GITHUB_OUTPUT
          else
            echo "Unknown Windows architecture"
            exit 1
          fi

      - name: Build wheel
        uses: PyO3/maturin-action@v1
        with:
          command: build
          target: ${{ steps.target.outputs.target }}
          args: --release --out dist
          rust-toolchain: stable
          working-directory: ./py-scouter

      - name: Check dist
        working-directory: ./py-scouter
        run: dir dist/

      - name: Check wheel
        working-directory: ./py-scouter
        run: twine check --strict dist/*

      - uses: actions/upload-artifact@v4
        with:
          name: pypi_files_windows_${{ steps.target.outputs.target }}_all
          path: ./py-scouter/dist
          retention-days: 1

  inspect-pypi-assets:
    needs: [build-ubuntu, build-macos, build-windows, build-sdist]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: get dist artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: pypi_files_*
          merge-multiple: true
          path: dist

      - name: list dist files
        run: |
          ls -lh dist/
          ls -l dist/
          echo "`ls dist | wc -l` files"

  test-builds-os:
    name: test build on ${{ matrix.os }}
    needs: [build-ubuntu, build-macos, build-windows, build-sdist]

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]

    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Create virtual environment
        working-directory: ./py-scouter
        run: |
          python -m venv .venv
          echo "$GITHUB_WORKSPACE/scouter/.venv/bin" >> $GITHUB_PATH

      - name: get dist artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: pypi_files_${{ matrix.os }}_*
          merge-multiple: true
          path: py-scouter/dist

      - name: install scouter-ml
        working-directory: ./py-scouter
        run: |
          python3 -m pip install scouter-ml --no-deps --no-index --force-reinstall --find-links dist
          pip install -r tests/requirements.txt
          pytest --ignore tests/integration --benchmark-skip

  python-release:
    if: github.event_name == 'release'
    name: Release-Python
    environment: pypi
    runs-on: ubuntu-latest
    needs: [test-builds-os]
    steps:
      - uses: actions/checkout@v4
      - name: install rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: Check version
        working-directory: ./py-scouter
        run: |
          export VERSION=$(cargo pkgid | cut -d "#" -f2)
          echo "version: $VERSION"
          echo "tag: $GITHUB_REF_NAME"
          test "v$VERSION" "=" "$GITHUB_REF_NAME"
      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - run: pip install -U twine
      - name: get dist artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: pypi_files_*
          merge-multiple: true
          path: dist
      - run: twine check --strict dist/*
      - name: upload to pypi
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
  rust-release:
    if: github.event_name == 'release'
    environment: crates.io
    name: Release-Rust
    runs-on: ubuntu-latest
    needs: [test-builds-os]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: dtolnay/rust-toolchain@stable
      - name: cache rust
        id: cargo_release_cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-cargo-release
      - name: Switch to main branch
        run: git checkout main
      - name: Run release-plz
        uses: MarcoIeni/release-plz-action@v0.5
        with:
          command: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_REGISTRY_TOKEN }}
