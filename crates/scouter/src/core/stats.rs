use ndarray::{Array2, ArrayView2};
use ndarray_stats::CorrelationExt;

pub fn compute_correlation_matrix(drift_data: &ArrayView2<f64>) -> Array2<f64> {
    let corr = drift_data.t().pearson_correlation().unwrap();
    corr
}

#[cfg(test)]
mod tests {
    use ndarray::arr2;

    use crate::core::stats::compute_correlation_matrix;

    #[test]
    fn test_correlation() {
        // Sample data
        let drift_data = arr2(&[
            [4., 1., 4.],
            [2., -1., 3.],
            [4., -1., 4.],
            [3., 1., 4.],
            [3., 1., 3.],
            [4., 1., 3.],
            [2., -1., 3.],
            [4., -1., 3.],
            [3., 1., 2.],
            [3., 1., 2.],
            [4., 1., 4.],
            [2., 1., 2.],
            [4., -1., 3.],
            [3., -1., 4.],
            [3., 1., 3.],
            [4., 1., 4.],
            [2., -1., 2.],
            [4., 1., 3.],
            [3., -1., 4.],
            [3., 1., 3.],
            [4., 1., 3.],
            [2., -1., 2.],
            [4., -1., 3.],
            [3., 1., 2.],
            [3., 1., 2.],
            [4., 1., 4.],
            [2., 1., 2.],
            [4., -1., 3.],
            [3., -1., 4.],
            [3., 1., 3.],
            [4., 1., 4.],
            [2., -1., 2.],
            [4., 1., 3.],
            [3., -1., 4.],
            [3., 1., 3.],
            [4., 1., 4.],
            [2., -1., 3.],
            [4., -1., 4.],
            [3., 1., 4.],
            [3., 1., 3.],
            [4., 1., 3.],
            [2., -1., 2.],
            [4., -1., 3.],
            [3., 1., 4.],
            [3., 1., 4.],
            [4., 1., 4.],
            [2., 1., 2.],
            [4., -1., 3.],
            [3., -1., 4.],
            [3., 1., 3.],
            [4., 1., 4.],
            [2., -1., 2.],
            [4., 1., 3.],
            [3., -1., 4.],
            [3., 1., 3.],
            [4., 1., 3.],
            [2., -1., 2.],
            [4., -1., 3.],
            [3., 1., 2.],
            [3., 1., 2.],
            [4., 1., 4.],
            [2., 1., 2.],
            [4., -1., 3.],
            [3., -1., 4.],
            [3., 1., 4.],
            [4., 1., 4.],
            [2., -1., 2.],
            [4., 1., 4.],
            [3., -1., 4.],
            [3., 1., 3.],
        ]);

        let corr = compute_correlation_matrix(&drift_data.view());
        assert_eq!(corr.shape(), &[3, 3]);
    }
}
