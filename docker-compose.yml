services:
  redis:
    image: redis:latest
    container_name: redis
    command: redis-server
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    build:
      context: .
      dockerfile: ./docker/dev/postgres/Dockerfile
    command:
      [
        "postgres",
        "-c",
        "log_statement=all",
        "-c",
        "log_destination=stderr",
        "-c",
        "shared_preload_libraries=pg_cron",
      ]
    restart: always
    user: postgres
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  scouter-server:
    depends_on:
      - postgres
    container_name: scouter_server
    volumes:
      - ./crates:/app/crates:ro
    build:
      context: .
      dockerfile: ./docker/dev/scouter-server/Dockerfile
    environment:
      DATABASE_URI: postgresql://postgres:postgres@postgres:5432/postgres

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.9.1
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    expose:
      - "29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
    healthcheck:
      test:
        ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka

  init-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic scouter_monitoring --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "

  scouter-server-kafka:
    depends_on:
      - init-kafka
      - postgres
    container_name: scouter_server_kafka
    volumes:
      - ./crates:/app/crates:ro
    build:
      context: .
      dockerfile: ./docker/dev/scouter-server/Dockerfile
    environment:
      DATABASE_URI: postgresql://postgres:postgres@postgres:5432/postgres
      KAFKA_BROKER: kafka:29092
    ports:
      - "8000:8000"

  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: always

  scouter-server-rabbitmq:
    depends_on:
      - rabbitmq
      - postgres
    container_name: scouter_server_rabbitmq
    volumes:
      - ./crates:/app/crates:ro
    build:
      context: ./docker/dev/scouter-server
      dockerfile: Dockerfile
    environment:
      DATABASE_URI: postgresql://postgres:postgres@postgres:5432/postgres

  server-backends:
    depends_on:
      - rabbitmq
      - init-kafka
      - redis
    build:
      context: .
      dockerfile: ./docker/dev/postgres/Dockerfile
    command:
      [
        "postgres",
        "-c",
        "log_statement=all",
        "-c",
        "log_destination=stderr",
        "-c",
        "shared_preload_libraries=pg_cron",
      ]
    user: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5